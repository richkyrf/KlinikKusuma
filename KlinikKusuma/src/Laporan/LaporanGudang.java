/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Laporan;

import File.ColumnGroup;
import File.ColumnsSpanTests;
import File.GroupableTableHeader;
import File.SimpleReport;
import FunctionGUI.JOptionPaneF;
import java.util.Date;
import static GlobalVar.Var.*;
import KomponenGUI.FDateF;
import LSubProces.RunSelct;
import ar.com.fdvs.dj.core.DynamicJasperHelper;
import ar.com.fdvs.dj.core.layout.ClassicLayoutManager;
import ar.com.fdvs.dj.domain.AutoText;
import ar.com.fdvs.dj.domain.DJCalculation;
import ar.com.fdvs.dj.domain.DynamicReport;
import ar.com.fdvs.dj.domain.Style;
import ar.com.fdvs.dj.domain.builders.ColumnBuilderException;
import ar.com.fdvs.dj.domain.builders.FastReportBuilder;
import ar.com.fdvs.dj.domain.constants.Border;
import ar.com.fdvs.dj.domain.constants.Font;
import ar.com.fdvs.dj.domain.constants.HorizontalAlign;
import ar.com.fdvs.dj.domain.constants.Page;
import ar.com.fdvs.dj.domain.constants.VerticalAlign;
import ar.com.fdvs.dj.test.BaseDjReportTest;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import static net.sf.dynamicreports.report.builder.DynamicReports.cmp;
import static net.sf.dynamicreports.report.builder.DynamicReports.col;
import static net.sf.dynamicreports.report.builder.DynamicReports.margin;
import static net.sf.dynamicreports.report.builder.DynamicReports.stl;
import static net.sf.dynamicreports.report.builder.DynamicReports.type;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.HorizontalTextAlignment;
import net.sf.dynamicreports.report.constant.PageOrientation;
import net.sf.dynamicreports.report.constant.PageType;
import net.sf.dynamicreports.report.constant.VerticalTextAlignment;
import net.sf.dynamicreports.report.constant.WhenNoDataType;
import net.sf.dynamicreports.report.datasource.DRDataSource;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.view.JasperViewer;
import ar.com.fdvs.dj.test.BaseDjReportTest;
import ar.com.fdvs.dj.test.TestRepositoryProducts;
import java.awt.Color;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

/**
 *
 * @author richk
 */
public class LaporanGudang extends javax.swing.JFrame {

    String[] JudulKolom;
    int[] masuk, keluar;

    /**
     * Creates new form LaporanLab
     */
    public LaporanGudang(String type) {
        setTitle(type);
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);
        tampilkan();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlableF1 = new KomponenGUI.JlableF();
        JDTanggal = new KomponenGUI.JdateCF();
        jlableF2 = new KomponenGUI.JlableF();
        JDTanggal1 = new KomponenGUI.JdateCF();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtableF1 = new KomponenGUI.JtableF();
        jbuttonF1 = new KomponenGUI.JbuttonF();
        jbuttonF2 = new KomponenGUI.JbuttonF();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jlableF1.setText("Periode :");

        JDTanggal.setDateFormatString("dd-MM-yyyy");
        Calendar c = Calendar.getInstance();
        c.set(Calendar.DAY_OF_MONTH, c.getActualMinimum(Calendar.DAY_OF_MONTH));
        Date now = c.getTime();
        JDTanggal.setDate(now);
        JDTanggal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JDTanggalPropertyChange(evt);
            }
        });

        jlableF2.setText("s/d");

        JDTanggal1.setDateFormatString("dd-MM-yyyy");
        c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
        now = c.getTime();
        JDTanggal1.setDate(now);
        JDTanggal1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JDTanggal1PropertyChange(evt);
            }
        });

        jtableF1 = new KomponenGUI.JtableF() {
            protected JTableHeader createDefaultTableHeader() {
                return new GroupableTableHeader(columnModel);
            }
        };
        new JScrollPane(jtableF1, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jtableF1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jtableF1.setAutoCreateRowSorter(true);
        jtableF1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jtableF1);

        jbuttonF1.setText("Print");
        jbuttonF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuttonF1ActionPerformed(evt);
            }
        });

        jbuttonF2.setText("Kembali");
        jbuttonF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuttonF2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlableF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JDTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlableF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JDTanggal1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbuttonF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbuttonF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JDTanggal1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlableF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JDTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlableF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbuttonF1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbuttonF2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (getTitle().equals("Laporan Gudang Kecil")) {
            laporanGudangKecil = null;
        } else if (getTitle().equals("Laporan Gudang Besar")) {
            laporanGudangBesar = null;
        } else {
            JOptionPaneF.showMessageDialog(this, "Parameter Salah.");
        }
    }//GEN-LAST:event_formWindowClosed

    private void jbuttonF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuttonF1ActionPerformed
        try {
//            if (getTitle().equals("Laporan Gudang Kecil")) {
//                build(jtableF1.getModel(), "Laporan Gudang Kecil", Judul);
//            } else if (getTitle().equals("Laporan Gudang Besar")) {
//                build(jtableF1.getModel(), "Laporan Gudang Besar", Judul);
//            } else {
//                JOptionPaneF.showMessageDialog(this, "Parameter Salah.");
//            }
            if (getTitle().equals("Laporan Gudang Kecil")) {
                print(jtableF1.getModel(), "Laporan Gudang Kecil", JudulKolom);
            } else if (getTitle().equals("Laporan Gudang Besar")) {
                print(jtableF1.getModel(), "Laporan Gudang Besar", JudulKolom);
            } else {
                JOptionPaneF.showMessageDialog(this, "Parameter Salah.");
            }
        } catch (Exception ex) {
            Logger.getLogger(LaporanGudang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbuttonF1ActionPerformed

    private void JDTanggalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JDTanggalPropertyChange
        tampilkan();
    }//GEN-LAST:event_JDTanggalPropertyChange

    private void JDTanggal1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JDTanggal1PropertyChange
        tampilkan();
    }//GEN-LAST:event_JDTanggal1PropertyChange

    private void jbuttonF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuttonF2ActionPerformed
        dispose();
//        String query = "";
//        for (int i = 1; i <= 31; i++) {
//            query += ", SUM(IF(a.`Tanggal` = '" + i + "', `Jumlah`, 0)) as '" + i + "'";
//        }
//        System.out.println(query);
    }//GEN-LAST:event_jbuttonF2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LaporanGudang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LaporanGudang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LaporanGudang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LaporanGudang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LaporanGudang("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static KomponenGUI.JdateCF JDTanggal;
    private static KomponenGUI.JdateCF JDTanggal1;
    private javax.swing.JScrollPane jScrollPane1;
    private KomponenGUI.JbuttonF jbuttonF1;
    private KomponenGUI.JbuttonF jbuttonF2;
    private KomponenGUI.JlableF jlableF1;
    private KomponenGUI.JlableF jlableF2;
    public KomponenGUI.JtableF jtableF1;
    // End of variables declaration//GEN-END:variables

    void tampilkan() {
        String sql = "";
        if (getTitle().equals("Laporan Gudang Kecil")) {
            RunSelct runSelct = new RunSelct();
            RunSelct runSelct2 = new RunSelct();
            runSelct.setQuery("SELECT `Tanggal`, CONCAT('M',DATE_FORMAT(`Tanggal`,'%d')) FROM `tbpermintaanstok` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `Tanggal`");
            runSelct2.setQuery("SELECT `Tanggal`, CONCAT('K',DATE_FORMAT(`Tanggal`,'%d')) FROM `tbbilling`a JOIN `tbbillingobat`b ON a.`NoBilling`=b.`NoBilling` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `Tanggal`");
            String dynamic1 = "";
            String dynamic2 = "";
            String colname1 = "";
            String colname2 = "";
            try {
                ResultSet rs1 = runSelct.excute();
                ResultSet rs2 = runSelct2.excute();
                rs1.last();
                rs2.last();
                masuk = new int[rs1.getRow()];
                keluar = new int[rs2.getRow()];
                JudulKolom = new String[rs1.getRow() + rs2.getRow() + 3];
                rs1.beforeFirst();
                rs2.beforeFirst();
                int row = 2;
                int i = 0;
                int j = 0;
                JudulKolom[0] = "Nama Item";
                JudulKolom[1] = "Stok Awal";
                while (rs1.next()) {
                    JudulKolom[row] = rs1.getString(2);
                    dynamic1 += ", SUM(IF(a.`Tanggal` = '" + rs1.getString(1) + "', `Jumlah`, 0)) as '" + rs1.getString(2) + "'";
                    colname1 += ", IFNULL(a.`" + rs1.getString(2) + "`,0) as '" + rs1.getString(2).replace("M", "") + "'";
                    masuk[i] = row;
                    i++;
                    row++;
                }
                while (rs2.next()) {
                    JudulKolom[row] = rs2.getString(2);
                    dynamic2 += ", SUM(IF(a.`Tanggal` = '" + rs2.getString(1) + "', `Jumlah`*-1, 0)) as '" + rs2.getString(2) + "'";
                    colname2 += ", IFNULL(b.`" + rs2.getString(2) + "`,0) as '" + rs2.getString(2).replace("K", "") + "'";
                    keluar[j] = row;
                    j++;
                    row++;
                }
                JudulKolom[row] = "Stok Akhir";
            } catch (SQLException e) {
                System.out.println("E6" + e);
                JOptionPaneF.showMessageDialog(null, "Gagal Panggil Tampilkan Data");
            } finally {
//            runSelct.closecon();
            }
            sql = "SELECT z.`Nama Barang`, `StokAwal` as 'Stok Awal' " + colname1 + " " + colname2 + ", `StokAkhir` as 'Stok Akhir' FROM ("
                    + "SELECT a.`IdBarang`, `NamaBarang` as 'Nama Barang' FROM `tbpermintaanstok`a JOIN `tbmbarang`b ON a.`IdBarang`=b.`IdBarang` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' UNION SELECT `IdObat`, `NamaBarang` as 'Nama Barang' FROM `tbbilling`a JOIN `tbbillingobat`b ON a.`NoBilling`=b.`NoBilling` JOIN `tbmbarang`c ON b.`IdObat`=c.`IdBarang` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' ) z\n"
                    + "LEFT JOIN\n"
                    + "(SELECT a.`IdBarang`, `NamaBarang` as 'Nama Barang' " + dynamic1 + " FROM `tbpermintaanstok`a JOIN `tbmbarang`b ON a.`IdBarang`=b.`IdBarang` WHERE 1 AND `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `NamaBarang` ) a \n"
                    + "ON z.`IdBarang`=a.`IdBarang`\n"
                    + "LEFT JOIN\n"
                    + "(SELECT `IdBarang`, `NamaBarang` as 'Nama Barang' " + dynamic2 + " FROM `tbbilling`a JOIN `tbbillingobat`b ON a.`NoBilling`=b.`NoBilling` JOIN `tbmbarang`c ON b.`IdObat`=c.`IdBarang` WHERE 1 AND a.`Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `NamaBarang` ) b \n"
                    + "	ON z.`IdBarang`=b.`IdBarang`\n"
                    + "LEFT JOIN\n"
                    + "    (SELECT `IdBarang`, SUM(`StokAwal`) as 'StokAwal' FROM (\n"
                    + "SELECT `IdBarang`, `NamaBarang`, 0 as 'StokAwal' FROM `tbmbarang` WHERE 1\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah` as 'StokAwal' FROM `tbpermintaanstok` WHERE `Tanggal` < '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdObat` as 'IdBarang', null as 'NamaBarang', `Jumlah`*-1 as 'StokAwal' FROM `tbbillingobat`a JOIN `tbbilling`b ON a.`NoBilling`=b.`NoBilling` WHERE `Tanggal` < '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah` as 'StokAwal' FROM `tbpenyesuaianstok` WHERE `Tanggal` < '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "'\n"
                    + ") t1 GROUP BY `IdBarang`) c\n"
                    + "    ON z.`IdBarang`=c.`IdBarang`\n"
                    + "LEFT JOIN\n"
                    + "    (SELECT `IdBarang`, SUM(`StokAkhir`) as 'StokAkhir' FROM (\n"
                    + "SELECT `IdBarang`, `NamaBarang`, 0 as 'StokAkhir' FROM `tbmbarang` WHERE 1\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah` as 'StokAkhir' FROM `tbpermintaanstok` WHERE `Tanggal` <= '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdObat` as 'IdBarang', null as 'NamaBarang', `Jumlah`*-1 as 'StokAkhir' FROM `tbbillingobat`a JOIN `tbbilling`b ON a.`NoBilling`=b.`NoBilling` WHERE `Tanggal` <= '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah` as 'StokAkhir' FROM `tbpenyesuaianstok` WHERE `Tanggal` <= '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "'\n"
                    + ") t1 GROUP BY `IdBarang`) d\n"
                    + "ON z.`IdBarang`=d.`IdBarang`\n"
                    + "ORDER BY `Nama Barang` ASC";
        } else if (getTitle().equals("Laporan Gudang Besar")) {
            RunSelct runSelct = new RunSelct();
            RunSelct runSelct2 = new RunSelct();
            runSelct.setQuery("SELECT `Tanggal`, CONCAT('M',DATE_FORMAT(`Tanggal`,'%d')) FROM `tbbarangmasuk`a JOIN `tbbarangmasukdetail`b ON a.`NoTransaksi`=b.`NoTransaksi` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `Tanggal`");
            runSelct2.setQuery("SELECT `Tanggal`, CONCAT('K',DATE_FORMAT(`Tanggal`,'%d')) FROM `tbpermintaanstok` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `Tanggal`");
            String dynamic1 = "";
            String dynamic2 = "";
            String colname1 = "";
            String colname2 = "";
            try {
                ResultSet rs1 = runSelct.excute();
                ResultSet rs2 = runSelct2.excute();
                rs1.last();
                rs2.last();
                masuk = new int[rs1.getRow()];
                keluar = new int[rs2.getRow()];
                JudulKolom = new String[rs1.getRow() + rs2.getRow() + 3];
                rs1.beforeFirst();
                rs2.beforeFirst();
                int row = 2;
                int i = 0;
                int j = 0;
                JudulKolom[0] = "Nama Item";
                JudulKolom[1] = "Stok Awal";
                while (rs1.next()) {
                    JudulKolom[row] = rs1.getString(2);
                    dynamic1 += ", SUM(IF(a.`Tanggal` = '" + rs1.getString(1) + "', `Jumlah`, 0)) as '" + rs1.getString(2) + "'";
                    colname1 += ", IFNULL(a.`" + rs1.getString(2) + "`,0) as '" + rs1.getString(2).replace("M", "") + "'";
                    masuk[i] = row;
                    i++;
                    row++;
                }
                while (rs2.next()) {
                    JudulKolom[row] = rs2.getString(2);
                    dynamic2 += ", SUM(IF(a.`Tanggal` = '" + rs2.getString(1) + "', `Jumlah`*-1, 0)) as '" + rs2.getString(2) + "'";
                    colname2 += ", IFNULL(b.`" + rs2.getString(2) + "`,0) as '" + rs2.getString(2).replace("K", "") + "'";
                    keluar[j] = row;
                    j++;
                    row++;
                }
                JudulKolom[row] = "Stok Akhir";
            } catch (SQLException e) {
                System.out.println("E6" + e);
                JOptionPaneF.showMessageDialog(null, "Gagal Panggil Tampilkan Data");
            } finally {
//            runSelct.closecon();
            }
            sql = "SELECT z.`Nama Barang`, `StokAwal` as 'Stok Awal' " + colname1 + " " + colname2 + ", `StokAkhir` as 'Stok Akhir' FROM ("
                    + "SELECT b.`IdBarang`, `NamaBarang` as 'Nama Barang' FROM `tbbarangmasuk`a JOIN `tbbarangmasukdetail`b ON a.`NoTransaksi`=b.`NoTransaksi` JOIN `tbmbarang`c ON b.`IdBarang`=c.`IdBarang` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' UNION SELECT a.`IdBarang`, `NamaBarang` as 'Nama Barang' FROM `tbpermintaanstok`a JOIN `tbmbarang`b ON a.`IdBarang`=b.`IdBarang` WHERE `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' ) z\n"
                    + "LEFT JOIN\n"
                    + "(SELECT c.`IdBarang`, `NamaBarang` as 'Nama Barang' " + dynamic1 + " FROM `tbbarangmasuk`a JOIN `tbbarangmasukdetail`b ON a.`NoTransaksi`=b.`NoTransaksi` JOIN `tbmbarang`c ON b.`IdBarang`=c.`IdBarang` WHERE 1 AND a.`Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `NamaBarang` ) a \n"
                    + "ON z.`IdBarang`=a.`IdBarang`\n"
                    + "LEFT JOIN\n"
                    + "(SELECT a.`IdBarang`, `NamaBarang` as 'Nama Barang' " + dynamic2 + " FROM `tbpermintaanstok`a JOIN `tbmbarang`b ON a.`IdBarang`=b.`IdBarang` WHERE 1 AND `Tanggal` BETWEEN '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "' AND '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "' GROUP BY `NamaBarang` ) b \n"
                    + "	ON z.`IdBarang`=b.`IdBarang`\n"
                    + "LEFT JOIN\n"
                    + "    (SELECT `IdBarang`, SUM(`StokAwal`) as 'StokAwal' FROM (\n"
                    + "SELECT `IdBarang`, `NamaBarang`, 0 as 'StokAwal' FROM `tbmbarang` WHERE 1\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang` as 'IdBarang', null as 'NamaBarang', `Jumlah` as 'StokAwal' FROM `tbbarangmasuk`a JOIN `tbbarangmasukdetail`b ON a.`NoTransaksi`=b.`NoTransaksi` WHERE `Tanggal` < '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah`*-1 as 'StokAwal' FROM `tbpermintaanstok` WHERE `Tanggal` < '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah` as 'StokAwal' FROM `tbpenyesuaianstokgudangbesar` WHERE `Tanggal` < '" + FDateF.datetostr(JDTanggal.getDate(), "yyyy-MM-dd") + "'\n"
                    + ") t1 GROUP BY `IdBarang`) c\n"
                    + "    ON z.`IdBarang`=c.`IdBarang`\n"
                    + "LEFT JOIN\n"
                    + "    (SELECT `IdBarang`, SUM(`StokAkhir`) as 'StokAkhir' FROM (\n"
                    + "SELECT `IdBarang`, `NamaBarang`, 0 as 'StokAkhir' FROM `tbmbarang` WHERE 1\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang` as 'IdBarang', null as 'NamaBarang', `Jumlah` as 'StokAkhir' FROM `tbbarangmasuk`a JOIN `tbbarangmasukdetail`b ON a.`NoTransaksi`=b.`NoTransaksi` WHERE `Tanggal` <= '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah`*-1 as 'StokAkhir' FROM `tbpermintaanstok` WHERE `Tanggal` <= '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "'\n"
                    + "UNION ALL\n"
                    + "SELECT `IdBarang`, null as 'NamaBarang', `Jumlah` as 'StokAkhir' FROM `tbpenyesuaianstokgudangbesar` WHERE `Tanggal` <= '" + FDateF.datetostr(JDTanggal1.getDate(), "yyyy-MM-dd") + "'\n"
                    + ") t1 GROUP BY `IdBarang`) d\n"
                    + "ON z.`IdBarang`=d.`IdBarang`\n"
                    + "ORDER BY `Nama Barang` ASC";
        }
        jtableF1.setQuery(sql);
        jtableF1.tampilkan();
        TableColumnModel cm = jtableF1.getColumnModel();
        ColumnGroup g_name = new ColumnGroup("Masuk");
        for (int i = 0; i < masuk.length; i++) {
            g_name.add(cm.getColumn(masuk[i]));
        }
        ColumnGroup g_lang = new ColumnGroup("Keluar");
        for (int i = 0; i < keluar.length; i++) {
            g_lang.add(cm.getColumn(keluar[i]));
        }
        GroupableTableHeader header = (GroupableTableHeader) jtableF1.getTableHeader();
        header.addColumnGroup(g_name);
        header.addColumnGroup(g_lang);
        for (int i = 0; i < jtableF1.getColumnCount(); i++) {
            if (i != 0) {
                jtableF1.setrender(new int[]{i}, new String[]{"CenteredNumber"});
            }
        }
    }

    void print(TableModel model, String judul, String[] JudulKolom) throws ColumnBuilderException, ClassNotFoundException, JRException {
        
        Style titleStyle = new Style();
        titleStyle.setFont(new Font(14, Font._FONT_VERDANA, true));
        titleStyle.setHorizontalAlign(HorizontalAlign.CENTER);
        titleStyle.setVerticalAlign(VerticalAlign.TOP);
        titleStyle.setPadding(5);

//        Style columnTitleStyle = new Style();
//        columnTitleStyle.setFont(new Font(10, Font._FONT_VERDANA, false));
//        columnTitleStyle.setHorizontalAlign(HorizontalAlign.CENTER);
//        columnTitleStyle.setVerticalAlign(VerticalAlign.MIDDLE);
//        columnTitleStyle.setPadding(2);
//        columnTitleStyle.setBorder(Border.THIN());
        Style colStyle = new Style();
        colStyle.setPadding(2);
        colStyle.setBorder(Border.THIN());
        colStyle.setHorizontalAlign(HorizontalAlign.CENTER);
        colStyle.setVerticalAlign(VerticalAlign.MIDDLE);

        FastReportBuilder frb = new FastReportBuilder();
        frb.setTitleStyle(titleStyle);
        frb.setTitle(judul);
        for (int i = 0; i < JudulKolom.length; i++) {
            if (i == 0) {
                frb.addColumn(JudulKolom[i], JudulKolom[i], String.class.getName(), 120, colStyle);
            } else {
                frb.addColumn(JudulKolom[i], JudulKolom[i], Integer.class.getName(), 60, colStyle);
            }
        }
//        frb.setColumnsPerPage(1, 10);
        frb.setUseFullPageWidth(true);
        frb.setColspan(2, masuk.length, "Masuk");
        frb.setColspan(masuk.length + 2, keluar.length, "Keluar");
        frb.setProperty("net.sf.jasperreports.export.csv.field.delimiter", ";");
        frb.setPageSizeAndOrientation(new Page(900, (JudulKolom.length * 60) + 120, false));
        frb.setMargins(20, 20, 20, 20);
        frb.setIgnorePagination(true);
        String a = "Di Print Oleh " + GlobalVar.VarL.username + " Pada " + FDateF.datetostr(new Date(), "dd/MM/yyyy HH:mm");
        frb.addAutoText(a, AutoText.POSITION_FOOTER, AutoText.ALIGNMENT_LEFT, 500);
        DynamicReport dr = frb.build();
        dr.getOptions().getDefaultHeaderStyle().setBorder(Border.THIN());
        dr.getOptions().getDefaultHeaderStyle().setBackgroundColor(Color.white);
        Map parameters = new HashMap();
        parameters.put("footer", "Di Print Oleh " + GlobalVar.VarL.username + " Pada " + FDateF.datetostr(new Date(), "dd/MM/yyyy HH:mm"));

        JRDataSource ds = createDataSource(JudulKolom);
        JasperPrint jp = DynamicJasperHelper.generateJasperPrint(dr, new ClassicLayoutManager(), ds, parameters);
        JasperViewer.viewReport(jp, false);    //finally display the report report
    }

    void build(TableModel model, String judul, String[] JudulKolom) {
        StyleBuilder titleStyle = stl.style().bold().setHorizontalTextAlignment(HorizontalTextAlignment.CENTER).setFontSize(14).setFontName("Verdana").setPadding(5).setBorder(stl.pen1Point().setLineWidth(1f));
        StyleBuilder columnTitleStyle = stl.style().bold().setTextAlignment(HorizontalTextAlignment.CENTER, VerticalTextAlignment.MIDDLE).setPadding(2).setBorder(stl.pen1Point().setLineWidth(0.5f));
        StyleBuilder colStyle = stl.style().setPadding(2).setBorder(stl.pen1Point().setLineWidth(0.5f));
        try {
            JasperReportBuilder report = DynamicReports.report();
            report.setColumnTitleStyle(columnTitleStyle);
            for (int i = 0; i < JudulKolom.length; i++) {
                if (i == 0) {
                    report.columns(col.column(JudulKolom[i], JudulKolom[i], type.stringType()).setStyle(colStyle).setHorizontalTextAlignment(HorizontalTextAlignment.LEFT).setWidth(120));
                } else {
                    report.columns(col.column(JudulKolom[i], JudulKolom[i], type.integerType()).setStyle(colStyle).setHorizontalTextAlignment(HorizontalTextAlignment.CENTER).setWidth(60));
                }
            }
            report.setPageFormat(900, (JudulKolom.length * 60) + 180, PageOrientation.LANDSCAPE);
            report.setPageMargin(margin().setLeft(20).setRight(20).setBottom(20).setTop(20));
            report.pageFooter(cmp.text("Di Print Oleh " + GlobalVar.VarL.username + " Pada " + FDateF.datetostr(new Date(), "dd/MM/yyyy HH:mm")));
            report.ignorePagination();
            report.title(cmp.horizontalList().add(cmp.text(judul).setStyle(titleStyle)).newRow().add(cmp.filler().setFixedHeight(10)));
            report.addProperty("net.sf.jasperreports.export.csv.field.delimiter", ";");
            report.setWhenNoDataType(WhenNoDataType.ALL_SECTIONS_NO_DETAIL);
            report.setDataSource(createDataSource(JudulKolom));
            report.show(false);
            //report.toPdf(new FileOutputStream("E:/report.pdf"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private JRDataSource createDataSource(String[] JudulKolom) {
        DRDataSource dataSource = new DRDataSource(JudulKolom);
        for (int i = 0; i < jtableF1.getModel().getRowCount(); i++) {
            Object data[] = new Object[JudulKolom.length];
            for (int j = 0; j < JudulKolom.length; j++) {
                if (j == 0) {
                    data[j] = jtableF1.getModel().getValueAt(i, j).toString();
                } else {
                    data[j] = new Integer(jtableF1.getModel().getValueAt(i, j).toString().replace(".", ""));
                }
            }
            dataSource.add(data);
        }
        return dataSource;
    }

}
